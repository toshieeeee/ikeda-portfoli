@import "_support_vendor_prefix";

@mixin prefixed-property($property, $value, $important: false) {
	$important: set_important($important);
	@if $support-webkit { -webkit-#{$property}: #{$value}#{$important}; }
	@if $support-mozilla { -moz-#{$property}: #{$value}#{$important}; }
	@if $support-opera { -o-#{$property}: #{$value}#{$important}; }
	@if $support-ms { -ms-#{$property}: #{$value}#{$important}; }
	@if $support-default { #{$property}: #{$value}#{$important}; }
}

@mixin prefixed-value($property, $value, $important: false) {
	$important: set_important($important);

	@if $support-webkit { #{$property}: -webkit-#{$value}#{$important}; }
	@if $support-mozilla { #{$property}: -moz-#{$value}#{$important}; }
	@if $support-opera { #{$property}: -o-#{$value}#{$important}; }
	@if $support-ms { #{$property}: -ms-#{$value}#{$important}; }
	@if $support-default { #{$property}: #{$value}#{$important}; }
}

@mixin linear-gradient($first, $rest...) {
    $direction: false;
    $wk_direction: false;
    $colorstops: false;

    // keyword convert
    $wk_LT: left top;
    $wk_LB: left bottom;
    $wk_RT: right top;
    $wk_RB: right bottom;

    $wk_down:  $wk_LT, $wk_LB;
    $wk_left:  $wk_LT, $wk_RT;
    $wk_up:    $wk_LB, $wk_LT;
    $wk_right: $wk_RT, $wk_LT;

    $wk_to_TL: $wk_RB, $wk_LT;
    $wk_to_TR: $wk_LB, $wk_LT;
    $wk_to_BR: $wk_LT, $wk_RB;
    $wk_to_BL: $wk_RT, $wk_LB;

    // if $first is 'color'
    @if type-of(nth($first, 1)) == 'color' {
        $direction: $first;
        $wk_direction: $wk_down;

        $colorstops: $rest; // ISSUE
    }
    // if keyword start by 'to'
    @else if type-of($first) == 'list' and nth($first, 1) == 'to' {

        $standard_keywords:
            to bottom, to left, to top, to right,
            to top left, to top right, to bottom right, to bottom left,
            to left top, to right top, to right bottom, to left bottom;

        $webkit_keywords:
            ($wk_down), ($wk_left), ($wk_up), ($wk_right),
            ($wk_to_BR), ($wk_to_BL), ($wk_to_TL), ($wk_to_TR),
            ($wk_to_BR), ($wk_to_BL), ($wk_to_TL), ($wk_to_TR);

        $idx: index( $standard_keywords, $first );

        @if $idx {
            $direction: $first;
            $wk_direction: nth( $webkit_keywords, $idx );

            $colorstops: $rest;
        }
    }
    // angle or not
    @else {
        $msg: '-webkit-gradient() に変換できないよ: #{$first}';
        @warn $msg;
        /* #{$msg} */
    }

    // output
    @if ($colorstops) {
        $wk_colorstops: null;

        @if type-of(nth($first, 1)) == 'color' {
            $wk_colorstops: convert_colorstop($first);
        }

        // join color-stop()
        @each $cs in $colorstops {
            $wk_colorstops: join($wk_colorstops, convert_colorstop($cs), comma);
        }

		@if $support-webkit { background-image: -webkit-gradient(linear, $wk_direction, $wk_colorstops ); }
		@if $support-mozilla { background-image: -moz-linear-gradient($direction, $colorstops); }
		@if $support-opera { background-image: -o-linear-gradient($direction, $colorstops); }
        @if $support-ms or $support-default { background-image: linear-gradient($direction, $colorstops); }
    }
}

// convert into color-stop() function
@function convert_colorstop($colorstop) {
    @if unit(nth($colorstop, 2)) != '%' {
        @warn 'パーセンテージで指定しよう: #{$colorstop}';
    }
    @return color-stop(nth($colorstop, 2), nth($colorstop, 1));
}

// set !important
@function set_important($important) {
	@if $important == 'important' or $important == true {
		$important: ' !important';
	} @else {
		$important: '';
	}

	@return $important;
}